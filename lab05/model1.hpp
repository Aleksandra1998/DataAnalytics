
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace model1_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ = 
{" (found before start of program)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 10, column 2 to column 13)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 11, column 2 to column 12)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 12, column 2 to column 32)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 16, column 2 to column 15)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 18, column 4 to column 34)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 17, column 17 to line 19, column 3)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 17, column 2 to line 19, column 3)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 30, column 2 to column 17)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 32, column 4 to column 56)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 31, column 18 to line 33, column 3)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 31, column 2 to line 33, column 3)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 23, column 2 to column 25)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 24, column 2 to column 24)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 25, column 2 to column 24)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 26, column 2 to column 24)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 2, column 2 to column 8)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 3, column 9 to column 10)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 3, column 2 to column 14)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 4, column 9 to column 10)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 4, column 2 to column 12)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 5, column 2 to column 9)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 6, column 9 to column 11)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 6, column 2 to column 17)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 16, column 9 to column 10)",
 " (in '/mnt/c/ola/DataAnalytics/lab05/model1.stan', line 30, column 13 to column 15)"};



class model1_model final : public model_base_crtp<model1_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> W__;
  std::vector<double> h;
  int GL;
  Eigen::Matrix<double, -1, 1> gen__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> W{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> gen{nullptr, 0};
 
 public:
  ~model1_model() { }
  
  inline std::string model_name() const final { return "model1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  model1_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model1_model_namespace::model1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      validate_non_negative_index("W", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","W","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      W__ = Eigen::Matrix<double, -1, 1>(N);
      new (&W) Eigen::Map<Eigen::Matrix<double, -1, 1>>(W__.data(), N);
      
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 18;
        W_flat__ = context__.vals_r("W");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          assign(W, W_flat__[(pos__ - 1)],
            "assigning variable W", index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      validate_non_negative_index("h", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","h","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      h = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      h = context__.vals_r("h");
      current_statement__ = 21;
      context__.validate_dims("data initialization","GL","int",
           std::vector<size_t>{});
      GL = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      GL = context__.vals_i("GL")[(1 - 1)];
      current_statement__ = 22;
      validate_non_negative_index("gen", "GL", GL);
      current_statement__ = 23;
      context__.validate_dims("data initialization","gen","double",
           std::vector<size_t>{static_cast<size_t>(GL)});
      gen__ = Eigen::Matrix<double, -1, 1>(GL);
      new (&gen) Eigen::Map<Eigen::Matrix<double, -1, 1>>(gen__.data(), GL);
      
      {
        std::vector<local_scalar_t__> gen_flat__;
        current_statement__ = 23;
        gen_flat__ = context__.vals_r("gen");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= GL; ++sym1__) {
          current_statement__ = 23;
          assign(gen, gen_flat__[(pos__ - 1)],
            "assigning variable gen", index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 25;
      validate_non_negative_index("h_sim", "GL", GL);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta;
      beta = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 20, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 5;
        assign(mu, (alpha + (beta * rvalue(W, "W", index_uni(i)))),
          "assigning variable mu", index_uni(i));
      }
      {
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 166, 20));
        current_statement__ = 13;
        lp_accum__.add(lognormal_lpdf<propto__>(beta, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(uniform_lpdf<propto__>(sigma, 0, 20));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(h, mu, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = in__.template read<local_scalar_t__>();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 20, lp__);
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 5;
        assign(mu, (alpha + (beta * rvalue(W, "W", index_uni(i)))),
          "assigning variable mu", index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> h_sim;
      h_sim = std::vector<double>(GL, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 11;
      for (int i = 1; i <= GL; ++i) {
        current_statement__ = 9;
        assign(h_sim,
          normal_rng((alpha + (beta * rvalue(gen, "gen", index_uni(i)))),
            sigma, base_rng__), "assigning variable h_sim", index_uni(i));
      }
      for (int sym1__ = 1; sym1__ <= GL; ++sym1__) {
        vars__.emplace_back(h_sim[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = context__.vals_r("beta")[(1 - 1)];
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_free__ = stan::math::lub_free(sigma, 0, 20);
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "beta", "sigma", "mu",
      "h_sim"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(GL)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= GL; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "h_sim" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= GL; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "h_sim" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"h_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(GL) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"h_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(GL) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = model1_model_namespace::model1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model1_model_namespace::profiles__;
}

#endif


